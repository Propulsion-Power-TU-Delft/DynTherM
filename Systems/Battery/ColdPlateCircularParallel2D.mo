within DynTherM.Systems.Battery;
model ColdPlateCircularParallel2D
  "Cold plate heat exchanger featuring parallel circular mini-channels with 2D modelling approach"

  replaceable model Mat = Materials.Aluminium constrainedby
    Materials.Properties "Material used for the plate" annotation (choicesAllMatching=true);
  replaceable package Medium = Modelica.Media.Air.MoistAir constrainedby
    Modelica.Media.Interfaces.PartialMedium "Medium model" annotation(choicesAllMatching = true);

  model Channel =
    DynTherM.Components.TwoDimensional.ColdPlateCircularChannel1D;

  // Geometry
  parameter Length L "Length" annotation (Dialog(tab="Geometry"));
  parameter Length W_plate "Width of the plate" annotation (Dialog(tab="Geometry"));
  parameter Length t_plate=2e-3 "Thickness of the plate" annotation (Dialog(tab="Geometry"));
  parameter Length R_int=5e-3 "Internal radius of mini-channels" annotation (Dialog(tab="Geometry"));
  parameter Length Roughness=0.015*10^(-3) "Channel roughness" annotation (Dialog(tab="Geometry"));
  parameter Volume V_inertia=1e-10 "Volume of the plenum placed between two consecutive control volumes" annotation (Dialog(tab="Geometry"));


  // Options
  parameter Boolean allowFlowReversal=true
    "= true to allow flow reversal, false restricts to design direction";
  parameter Choices.PDropOpt DP_opt
    "Select the type of pressure drop to impose";
  parameter Choices.InitOpt initOpt=Choices.InitOpt.fixedState
    "Initialization option" annotation (Dialog(tab="Initialization"));

  // Initialization
  parameter Temperature T_start_plate=288.15 "Temperature of the plate - start value" annotation (Dialog(tab="Initialization"));
  parameter Temperature T_start_fluid=288.15 "Fluid temperature - start value" annotation (Dialog(tab="Initialization"));
  parameter Pressure P_start=101325 "Fluid pressure - start value" annotation (Dialog(tab="Initialization"));
  parameter MassFraction X_start[Medium.nX]=Medium.reference_X
    "Mass fractions - start value" annotation (Dialog(tab="Initialization"));
  parameter Medium.ThermodynamicState state_start=
    Medium.setState_pTX(P_start, T_start_fluid, X_start)
    "Starting thermodynamic state" annotation (Dialog(tab="Initialization"));
  parameter MassFlowRate m_flow_start=1 "Mass flow rate - start value" annotation (Dialog(tab="Initialization"));
  parameter Velocity u_start=2 "Flow velocity within one channel - start value" annotation (Dialog(tab="Initialization"));
  parameter Density rho_start=1 "Density - start value" annotation (Dialog(tab="Initialization"));
  parameter Pressure dP_start=0.1e5 "Pressure drop - start value" annotation (Dialog(tab="Initialization"));
  parameter ReynoldsNumber Re_start=20e3 "Reynolds number - start value" annotation (Dialog(tab="Initialization"));
  parameter PrandtlNumber Pr_start=1.5 "Prandtl number - start value" annotation (Dialog(tab="Initialization"));

  // Discretization
  parameter Integer N_cv(min=1) "Number of control volumes in which each channel is discretized";
  parameter Integer N_channels(min=1) "Number of channels in parallel";

  Channel channel[N_channels](
    redeclare model Mat = Mat,
    redeclare package Medium = Medium,
    each N_cv=N_cv,
    each N_channels=1,
    each L=L,
    each d=W_plate/N_channels,
    each t=t_plate,
    each R_int=R_int,
    each V_inertia = V_inertia,
    each Roughness=Roughness,
    each T_start_solid=T_start_plate,
    each T_start_fluid=T_start_fluid,
    each P_start=P_start,
    each X_start=X_start,
    each state_start=state_start,
    each m_flow_start=m_flow_start,
    each u_start=u_start,
    each rho_start=rho_start,
    each dP_start=dP_start,
    each Re_start=Re_start,
    each Pr_start=Pr_start,
    each initOpt=initOpt,
    each DP_opt=DP_opt,
    each allowFlowReversal=allowFlowReversal);

  // For Results
  Pressure PressureDropColdplate "Total pressure drop in the cold plate";
  Volume V_plate "Total Volume of the plate";
  Volume V_fluid "Total Volume of the fluid";
  Mass m_fluid "Total mass of the fluid";
  Mass m_solid "Total mass of the solid";


  CustomInterfaces.DistributedHeatPort_A Top(Nx=N_cv, Ny=N_channels)
    annotation (Placement(transformation(extent={{-16,44},{16,76}}),
        iconTransformation(extent={{-30,6},{30,66}})));
  CustomInterfaces.DistributedHeatPort_A Bottom(Nx=N_cv, Ny=N_channels)
    annotation (Placement(transformation(extent={{-16,-76},{16,-44}}),
        iconTransformation(extent={{-30,-70},{30,-10}})));

  CustomInterfaces.FluidPort_B outlet(
    redeclare package Medium = Medium,
    m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0, start=-
          m_flow_start),
    P(start=P_start),
    h_outflow(start=Medium.specificEnthalpy(state_start)),
    Xi_outflow(start=X_start))
    annotation (Placement(transformation(extent={{80,-20},{120,20}},
                            rotation=0), iconTransformation(extent={{90,-10},{
            110,10}})));
  CustomInterfaces.FluidPort_A inlet(
    redeclare package Medium = Medium,
    m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0, start=
          m_flow_start),
    P(start=P_start),
    h_outflow(start=Medium.specificEnthalpy(state_start)),
    Xi_outflow(start=X_start))
    annotation (Placement(transformation(extent={{-120,-20},{-80,20}},
                            rotation=0), iconTransformation(extent={{-110,-10},{
            -90,10}})));

equation

  PressureDropColdplate = inlet.P - outlet.P;
  V_plate= L*W_plate*t_plate;
  V_fluid = (pi*R_int*R_int) * L * N_channels;
  m_solid = Mat.rho*(V_plate-V_fluid);
  m_fluid = (channel[1].cv[1].circularPipe.rho + channel[end].cv[end].circularPipe.rho)*V_fluid/2;

  for j in 1:N_channels loop

  // boundary thermal connections
    for i in 1:N_cv loop
      connect(Top.ports[i, j], channel[j].cv[i].SouthBottom);
      connect(Bottom.ports[i, j], channel[j].cv[i].NorthTop);
    end for;
  end for;

  // internal thermal connections
  for j in 1:(N_channels-1) loop
    for i in 1:N_cv loop
      connect(channel[j].cv[i].NorthWestHor, channel[j+1].cv[i].NorthEastHor);
      connect(channel[j].cv[i].West, channel[j+1].cv[i].East);
      connect(channel[j].cv[i].SouthWestHor, channel[j+1].cv[i].SouthEastHor);
    end for;
  end for;

  // boundary flow connections
  for i in 1:N_channels loop
    connect(inlet, channel[i].inlet);
    connect(channel[i].outlet, outlet);
  end for;

  // Sanity check
  assert(t_plate > 2*R_int, "The plate is too thin for the given channel radius");
  assert(W_plate > N_channels*2*R_int, "Number of mini-channels is too large for the prescribed plate width and channel internal radius");

  annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
          Bitmap(
          extent={{-110,-74},{114,70}},
          imageSource="",
          fileName="modelica://DynTherM/Figures/ColdPlateParallel.png")}),
                                                         Diagram(
        coordinateSystem(preserveAspectRatio=false)),
    Documentation(info="<html>
<p>The circular mini-channels are discretized along the longitudinal direction.</p>
<p><img src=\"modelica://DynTherM/Figures/Circular_cold_plate.png\"/></p>
</html>"));
end ColdPlateCircularParallel2D;
